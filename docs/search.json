[{"path":"https://nibortolum.github.io/GWlasso/articles/example_analysis.html","id":"what-is-a-geographically-weighted-model","dir":"Articles","previous_headings":"","what":"What is a Geographically Weighted Model ?","title":"Example analysis","text":"Imagine want predict environmental variable \\(Y\\) one site based distribution species kind observed site. fit model data, gathered around world, associating species distribution \\(Y\\). Now, problem species ubiquitous, distribution species, although varying according \\(Y\\), also varies according latitude longitude. means species \\(\\) may strongly linked \\(Y\\) England Bulgaria instance. species \\(B\\) completely absent areas. Geographically weighted models tackle issues taking account spatial heterogeneity species distribution. relies two parameters : bandwidth distance sampling sites bandwidth determine number samples around sample interest used fit model. can two kind : fixed : bandwidth radius around sample interest samples must used fit model. adaptive : bandwidth \\(n\\) closest sample around sample interest used fit model","code":""},{"path":"https://nibortolum.github.io/GWlasso/articles/example_analysis.html","id":"what-is-lasso","dir":"Articles","previous_headings":"","what":"What is Lasso ?","title":"Example analysis","text":"Without giving much details, let’s say lasso regression method seeks best accuracy discarding variables really informative prediction (linera coefficient variables shrunk zero). especially useful ecology tackle non ubiquitous nature species. local regression, species can different informative values depending area ’re found. Lasso take care .","code":""},{"path":[]},{"path":"https://nibortolum.github.io/GWlasso/articles/example_analysis.html","id":"data","dir":"Articles","previous_headings":"What to run","what":"data","title":"Example analysis","text":"example, use dataset Amesbury (2016). Load .","code":"data(Amesbury)"},{"path":"https://nibortolum.github.io/GWlasso/articles/example_analysis.html","id":"setting-the-bandwith","dir":"Articles","previous_headings":"What to run","what":"Setting the bandwith","title":"Example analysis","text":"One key element fit geographically weighted models bandwidth. rule thumb, depends distribution samples used fit model one hand, biogeographical properties investigated species. Nevertheless, samples used fit model somewhat geographically evenly distributed, fixed bandwidth job. select bandwidth need : distance matrix species abundance matrix (data frame). transformed suitable format regressions, relative abundance hellinger transformation. See [vegan::decostand()] vector containing environmental variable predict. function gwl_bw_estimation run bruteforce algorithm select bandwidth produces smallest \\(RMSE\\). following example : coords.sample dataframe two columnes containing latitude longitude samples sp.df dataframe contaning species columns samples rows .y environmental variable interest, reconstruct arguments please refer help page functions command extremely long run. dataset 1100 samples 45 species takes approximately 24 hours.time can reduced playing \\(n\\) parameter, set number bandwidths test. Parallelizing code work progress.","code":"# compute the distance matrix distance_matrix <- compute_distance_matrix(Amesbury$coords, add.noise = TRUE)  # run the bw selection algorithm bw_choice <- gwl_bw_estimation(x.var = Amesbury$spe.df,                       y.var = Amesbury$WTD,                       dist.mat = distance_matrix,                       adaptive = TRUE,                       adptbwd.thresh = 0.1,                       kernel = \"bisquare\",                       alpha = 1,                       progress = TRUE,                       n = 100)"},{"path":"https://nibortolum.github.io/GWlasso/articles/example_analysis.html","id":"fitting-a-model","dir":"Articles","previous_headings":"What to run","what":"Fitting a model","title":"Example analysis","text":"chosen bandwidth, can pursue. wich run gwl_bw_estimation(), can eyeball bandwith, relying ecological expertise. Let’s say decide go adaptive bandwidth 120. means sample, model computed 120 closest sample. graph rendered chunk displayed shows whether coefficient set zero species, fo model (remember GWL one local modal per sample). upper panel show mean y.var values samples used fit local model. ecology, may help grasp sense indicative value taxa given ecological variable.","code":"# compute the distance matrix distance_matrix <- compute_distance_matrix(Amesbury$coords, add.noise = TRUE)  my.gwl.fit <- gwl_fit(bw= 120,                      x.var = Amesbury$spe.df,                       y.var = Amesbury$WTD,                       dist.mat = distance_matrix,                       adaptive = TRUE,                       kernel = \"bisquare\",                       alpha = 1,                       progress = TRUE)  plot(my.gwl.fit)"},{"path":"https://nibortolum.github.io/GWlasso/articles/example_analysis.html","id":"make-prediction","dir":"Articles","previous_headings":"What to run","what":"Make prediction","title":"Example analysis","text":"fitted model, can course use model R make prediction :","code":"my_predicted_values <- predict(my.gwl.fit, newdata = Amesbury$spe.df, newcoords = Amesbury$coords)  plot( my_predicted_values ~Amesbury$WTD) abline(0,1, col=\"red\")"},{"path":"https://nibortolum.github.io/GWlasso/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthieu Mulot. Author, maintainer, copyright holder. Sophie Erb. Author.","code":""},{"path":"https://nibortolum.github.io/GWlasso/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulot M, Erb S (2024). GWlasso: Geographically Weighted Lasso. R package version 1.0.1, https://nibortolum.github.io/GWlasso/, https://github.com/nibortolum/GWlasso.","code":"@Manual{,   title = {GWlasso: Geographically Weighted Lasso},   author = {Matthieu Mulot and Sophie Erb},   year = {2024},   note = {R package version 1.0.1, https://nibortolum.github.io/GWlasso/},   url = {https://github.com/nibortolum/GWlasso}, }"},{"path":"https://nibortolum.github.io/GWlasso/index.html","id":"gwlasso","dir":"","previous_headings":"","what":"Geographically Weighted Lasso","title":"Geographically Weighted Lasso","text":"goal GWlasso provides set functions perform Geographically weighted lasso. originally thought used palaeoecological settings can used extents. package submitted CRAN awaiting evaluation","code":""},{"path":"https://nibortolum.github.io/GWlasso/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geographically Weighted Lasso","text":"can install development version GWlasso GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nibortolum/GWlasso\")"},{"path":"https://nibortolum.github.io/GWlasso/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Geographically Weighted Lasso","text":"basic example run GWlasso pipeline:","code":"library(GWlasso)  ## compute a distance matrix from a set of coordinates distance_matrix <- compute_distance_matrix <- function(coords, method = \"euclidean\", add.noise = FALSE)  ## compute the optimal bandwidth    myst.est <- gwl_bw_estimation(x.var = predictors_df,                                y.var = y_vector,                               dist.mat = distance_matrix,                               adaptive = TRUE,                               adptbwd.thresh = 0.1,                               kernel = \"bisquare\",                               alpha = 1,                               progress = TRUE,                               n=40,                               nfolds = 5)  ## Compute the optimal model my.gwl.fit <- gwl_fit(myst.est$bw,                       x.var = data.sample[,-1],                        y.var = data.sample$WTD,                       kernel = \"bisquare\",                       dist.mat = distance_matrix,                        alpha = 1,                        adaptive = TRUE, progress = T)  ## make predictions   predicted_values <- predict(my.gwl.fit, newdata = new_data, newcoords = new_coords)"},{"path":"https://nibortolum.github.io/GWlasso/reference/Amesbury.html","id":null,"dir":"Reference","previous_headings":"","what":"Amesbury Testate Amoebae dataset — Amesbury","title":"Amesbury Testate Amoebae dataset — Amesbury","text":"Dataset Amesbury (2016) Development new pan-European testate amoeba transfer function reconstructing peatland palaeohydrology Report","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/Amesbury.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amesbury Testate Amoebae dataset — Amesbury","text":"","code":"Amesbury"},{"path":[]},{"path":"https://nibortolum.github.io/GWlasso/reference/Amesbury.html","id":"amesbury","dir":"Reference","previous_headings":"","what":"Amesbury","title":"Amesbury Testate Amoebae dataset — Amesbury","text":"dataset contains data Amesbury (2016). essence, Testate amoebae community table (45 broad TA taxa 1103 samples) spe.df species x sites dataframe stites rows species column WTD vector od Water table depth associated samples coords dataframe containing coordinates sample","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/Amesbury.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Amesbury Testate Amoebae dataset — Amesbury","text":"doi:10.1016/j.quascirev.2016.09.024","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/Amesbury.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Amesbury Testate Amoebae dataset — Amesbury","text":"Matthew J. Amesbury, Graeme T. Swindles, Anatoly Bobrov, Dan J. Charman, Joseph Holden, Mariusz Lamentowicz, Gunnar Mallon, Yuri Mazei, Edward .D. Mitchell, Richard J. Payne, Thomas P. Roland, T. Edward Turner, Barry G. Warner, Development new pan-European testate amoeba transfer function reconstructing peatland palaeohydrology. Quaternary Science Reviews, vol. 152, 2016, pages 132-151. doi:10.1016/j.quascirev.2016.09.024 .","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/compute_distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute distance matrix — compute_distance_matrix","title":"Compute distance matrix — compute_distance_matrix","text":"compute_distance_matrix() small helper function help compute distance matrix. geographically method work, important distances points zero. function allows add small random noise avoid zero distances.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/compute_distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute distance matrix — compute_distance_matrix","text":"","code":"compute_distance_matrix(data, method = \"euclidean\", add.noise = FALSE)"},{"path":"https://nibortolum.github.io/GWlasso/reference/compute_distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute distance matrix — compute_distance_matrix","text":"data dataframe matrix containing least two numerical columns. method method compute distance matrix. Ultimately passed stats::dist(). Can euclidean, maximum, manhattan, canberra, binary minkowski. add.noise TRUE/FALSE set TRUE add small noise distance matrix. Noise \\(U\\) generated \\( U \\sim (1\\times 10^{-6}, 5\\times 10^{-6})\\). Noise added pairs distance zero.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/compute_distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute distance matrix — compute_distance_matrix","text":"distance matrix, usable gwl_bw_estimation()","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/compute_distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute distance matrix — compute_distance_matrix","text":"","code":"coords <- data.frame(\"Lat\" = rnorm(200), \"Long\" = rnorm(200)) distance_matrix <- compute_distance_matrix(coords)"},{"path":"https://nibortolum.github.io/GWlasso/reference/GWlasso-package.html","id":null,"dir":"Reference","previous_headings":"","what":"GWlasso: Geographically Weighted Lasso — GWlasso-package","title":"GWlasso: Geographically Weighted Lasso — GWlasso-package","text":"Performs geographically weighted Lasso regressions. Find optimal bandwidth, fit geographically weighted lasso ridge regression, make predictions. methods specially well suited ecological inferences. Bandwidth selection algorithm . Comber P. Harris (2018) doi:10.1007/s10109-018-0280-7 .","code":""},{"path":[]},{"path":"https://nibortolum.github.io/GWlasso/reference/GWlasso-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GWlasso: Geographically Weighted Lasso — GWlasso-package","text":"Maintainer: Matthieu Mulot matthieu.mulot@gmail.com (ORCID) [copyright holder] Authors: Sophie Erb (ORCID)","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_bw_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Bandwidth estimation for Geographically Weighted Lasso — gwl_bw_estimation","title":"Bandwidth estimation for Geographically Weighted Lasso — gwl_bw_estimation","text":"function performs bruteforce selection optimal bandwidth selected kernel perform geographically weighted lasso. user aware function really long run depending settings. recommend starting nbw = 5 nfolds = 5 first ensure function running properly producing desired output.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_bw_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bandwidth estimation for Geographically Weighted Lasso — gwl_bw_estimation","text":"","code":"gwl_bw_estimation(   x.var,   y.var,   dist.mat,   adaptive = TRUE,   adptbwd.thresh = 0.1,   kernel = \"bisquare\",   alpha = 1,   progress = TRUE,   nbw = 100,   nfolds = 5 )"},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_bw_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bandwidth estimation for Geographically Weighted Lasso — gwl_bw_estimation","text":"x.var input matrix, dimension nobs x nvars; row observation vector. x 2 columns. y.var response variable lasso dist.mat distance matrix. can generated compute_distance_matrix() adaptive TRUE FALSE Whether perform adaptive bandwidth search . fixed bandwidth means samples selected fit determined fixed radius around location. aptative bandwidth , radius around location varies gather fixed number samples around investigated location adptbwd.thresh lowest fraction samples take account local regression. Must 0 < adptbwd.thresh < 1 kernel geographical kernel shape compute weight. passed GWmodel::gw.weight() Can gaussian, exponential, bisquare, tricube, boxcar alpha elasticnet mixing parameter. set 1 lasso, 0 ridge. see glmnet::glmnet() progress TRUE, print progress bar nbw number bandwidth test nfolds number f folds glmnet cross validation","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_bw_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bandwidth estimation for Geographically Weighted Lasso — gwl_bw_estimation","text":"gwlest object. list rmspe (RMSPE model associated badwidth), NA (number NA dataset), bw (optimal bandwidth), bwd.vec (vector tested bandwidth)","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_bw_estimation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bandwidth estimation for Geographically Weighted Lasso — gwl_bw_estimation","text":". Comber P. Harris. Geographically weighted elastic net logistic regression (2018). Journal Geographical Systems, vol. 20, . 4, pages 317–341. doi:10.1007/s10109-018-0280-7 .","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_bw_estimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bandwidth estimation for Geographically Weighted Lasso — gwl_bw_estimation","text":"","code":"predictors <- matrix(data = rnorm(2500), 50,50) y_value <- sample(1:1000, 50) coords <- data.frame(\"Lat\" = rnorm(50), \"Long\" = rnorm(50)) distance_matrix <- compute_distance_matrix(coords)  # \\donttest{   myst.est <- gwl_bw_estimation(x.var = predictors,                                  y.var = y_value,                                 dist.mat = distance_matrix,                                 adaptive = TRUE,                                 adptbwd.thresh = 0.5,                                 kernel = \"bisquare\",                                 alpha = 1,                                 progress = TRUE,                                 n=10,                                 nfolds = 5)         myst.est #> Optimalbw :  50  #> kernel :  bisquare  #> adaptive :  TRUE   # }"},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a geographically weighted lasso with the selected bandwidth — gwl_fit","title":"Fit a geographically weighted lasso with the selected bandwidth — gwl_fit","text":"Fit geographically weighted lasso selected bandwidth","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a geographically weighted lasso with the selected bandwidth — gwl_fit","text":"","code":"gwl_fit(   bw,   x.var,   y.var,   kernel,   dist.mat,   alpha,   adaptive,   progress = TRUE,   nfolds = 5 )"},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a geographically weighted lasso with the selected bandwidth — gwl_fit","text":"bw Bandwidth x.var input matrix, dimension nobs x nvars; row observation vector. x 2 columns. y.var response variable lasso kernel geographical kernel shape compute weight. passed GWmodel::gw.weight() Can gaussian, exponential, bisquare, tricube, boxcar dist.mat distance matrix. can generated compute_distance_matrix() alpha elasticnet mixing parameter. set 1 lasso, 0 ridge. see glmnet::glmnet() adaptive TRUE FALSE Whether perform adaptive bandwidth search . fixed bandwidth means samples selected fit determined fixed radius around location. adaptive bandwidth, radius around location varies gather fixed number samples around investigated location progress TRUE/FALSE whether display progress bar nfolds number f folds glmnet cross validation","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a geographically weighted lasso with the selected bandwidth — gwl_fit","text":"gwlfit object containing fitted Geographically weighted Lasso.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/gwl_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a geographically weighted lasso with the selected bandwidth — gwl_fit","text":"","code":"predictors <- matrix(data = rnorm(2500), 50,50) y_value <- sample(1:1000, 50) coords <- data.frame(\"Lat\" = rnorm(50), \"Long\" = rnorm(50)) distance_matrix <- compute_distance_matrix(coords)  my.gwl.fit <- gwl_fit(bw = 20,                       x.var = predictors,                        y.var = y_value,                       kernel = \"bisquare\",                       dist.mat = distance_matrix,                        alpha = 1,                        adaptive = TRUE,                        progress = TRUE,                       nfolds = 5)  my.gwl.fit #> Bandwidth : 20  #> adaptive : TRUE  #> Number of models : 50  #> RMSPE :  393.2292  #> Number of predictors : 50"},{"path":"https://nibortolum.github.io/GWlasso/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://nibortolum.github.io/GWlasso/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/plot.gwlfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for gwlfit object — plot.gwlfit","title":"Plot method for gwlfit object — plot.gwlfit","text":"Plot method gwlfit object","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/plot.gwlfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for gwlfit object — plot.gwlfit","text":"","code":"# S3 method for gwlfit plot(x, ...)"},{"path":"https://nibortolum.github.io/GWlasso/reference/plot.gwlfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for gwlfit object — plot.gwlfit","text":"x gwlfit object returned gwl_fit() ... ellipsis S3 method compatibility","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/plot.gwlfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for gwlfit object — plot.gwlfit","text":"ggplot","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/plot.gwlfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for gwlfit object — plot.gwlfit","text":"","code":"predictors <- matrix(data = rnorm(2500), 50,50) y_value <- sample(1:1000, 50) coords <- data.frame(\"Lat\" = rnorm(50), \"Long\" = rnorm(50)) distance_matrix <- compute_distance_matrix(coords)  my.gwl.fit <- gwl_fit(bw = 20,                       x.var = predictors,                        y.var = y_value,                       kernel = \"bisquare\",                       dist.mat = distance_matrix,                        alpha = 1,                        adaptive = TRUE,                        progress = TRUE,                       nfolds = 5)  plot(my.gwl.fit) #> Registered S3 method overwritten by 'ggside': #>   method from    #>   +.gg   ggplot2"},{"path":"https://nibortolum.github.io/GWlasso/reference/plot_gwl_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a map of beta coefficient for gwlfit object — plot_gwl_map","title":"Plot a map of beta coefficient for gwlfit object — plot_gwl_map","text":"function plots map beta coefficients selected column (aka species). function work, coordinates supplied gwl_fit() must named \"Lat\" \"Long\". function bulletproof yet added reproduce maps original publication.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/plot_gwl_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a map of beta coefficient for gwlfit object — plot_gwl_map","text":"","code":"plot_gwl_map(x, column, crs = 4326)"},{"path":"https://nibortolum.github.io/GWlasso/reference/plot_gwl_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a map of beta coefficient for gwlfit object — plot_gwl_map","text":"x gwlfit object returned gwl_fit(). column name variable plotted map. Must quoted. instance \"NEB.MIN\" crs crs projection map (default mercator WGS84). See sf::st_crs()","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/plot_gwl_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a map of beta coefficient for gwlfit object — plot_gwl_map","text":"ggplot object","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/plot_gwl_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a map of beta coefficient for gwlfit object — plot_gwl_map","text":"","code":"data(Amesbury)      distance_matrix <- compute_distance_matrix(Amesbury$coords[1:30,], add.noise = TRUE)         my.gwl.fit <- gwl_fit(bw= 20,                         x.var = Amesbury$spe.df[1:30,],                         y.var = Amesbury$WTD[1:30],                         dist.mat = distance_matrix,                         adaptive = TRUE,                         kernel = \"bisquare\",                         alpha = 1,                         progress = TRUE)                            if(requireNamespace(\"maps\")){     plot_gwl_map(my.gwl.fit, column = \"NEB.MIN\")   } #> Loading required namespace: maps"},{"path":"https://nibortolum.github.io/GWlasso/reference/predict.gwlfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for gwlfit objects — predict.gwlfit","title":"Predict method for gwlfit objects — predict.gwlfit","text":"Predict method gwlfit objects","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/predict.gwlfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for gwlfit objects — predict.gwlfit","text":"","code":"# S3 method for gwlfit predict(object, newdata, newcoords, type = \"response\", verbose = FALSE, ...)"},{"path":"https://nibortolum.github.io/GWlasso/reference/predict.gwlfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for gwlfit objects — predict.gwlfit","text":"object Object class inheriting \"gwlfit\" newdata data.frame matrix columns training dataset newcoords dataframe matrix coordinates new data type type response. see glmnet::predict.glmnet() verbose TRUE print info execution function (useful large predictions) ... ellipsis S3 compatibility. used function.","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/predict.gwlfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for gwlfit objects — predict.gwlfit","text":"vector predicted values","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/predict.gwlfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for gwlfit objects — predict.gwlfit","text":"","code":"predictors <- matrix(data = rnorm(2500), 50,50) y_value <- sample(1:1000, 50) coords <- data.frame(\"Lat\" = rnorm(50), \"Long\" = rnorm(50)) distance_matrix <- compute_distance_matrix(coords)  my.gwl.fit <- gwl_fit(bw = 20,                       x.var = predictors,                        y.var = y_value,                       kernel = \"bisquare\",                       dist.mat = distance_matrix,                        alpha = 1,                        adaptive = TRUE,                        progress = TRUE,                       nfolds = 5) my.gwl.fit #> Bandwidth : 20  #> adaptive : TRUE  #> Number of models : 50  #> RMSPE :  330.6282  #> Number of predictors : 50   new_predictors <- matrix(data = rnorm(500), 10,50) new_coords <- data.frame(\"Lat\" = rnorm(10), \"Long\" = rnorm(10))  predicted_values <- predict(my.gwl.fit,                              newdata = new_predictors,                               newcoords = new_coords)"},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlest.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing gwlest objects — print.gwlest","title":"Printing gwlest objects — print.gwlest","text":"Printing gwlest objects","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing gwlest objects — print.gwlest","text":"","code":"# S3 method for gwlest print(x, ...)"},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing gwlest objects — print.gwlest","text":"x object class gwlest ... ellipsis S3 method compatibility","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing gwlest objects — print.gwlest","text":"function print key elements gwlest object","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing gwlest objects — print.gwlest","text":"","code":"predictors <- matrix(data = rnorm(2500), 50,50) y_value <- sample(1:1000, 50) coords <- data.frame(\"Lat\" = rnorm(50), \"Long\" = rnorm(50)) distance_matrix <- compute_distance_matrix(coords)  # \\donttest{   myst.est <- gwl_bw_estimation(x.var = predictors,                                  y.var = y_value,                                 dist.mat = distance_matrix,                                 adaptive = TRUE,                                 adptbwd.thresh = 0.5,                                 kernel = \"bisquare\",                                 alpha = 1,                                 progress = TRUE,                                 n=10,                                 nfolds = 5)         myst.est #> Optimalbw :  44  #> kernel :  bisquare  #> adaptive :  TRUE   # }"},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing gwlfit objects — print.gwlfit","title":"Printing gwlfit objects — print.gwlfit","text":"Printing gwlfit objects","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing gwlfit objects — print.gwlfit","text":"","code":"# S3 method for gwlfit print(x, ...)"},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing gwlfit objects — print.gwlfit","text":"x gwlfit object ... ellipsis S3 method compatibility","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing gwlfit objects — print.gwlfit","text":"function print key elements gwlfit object","code":""},{"path":"https://nibortolum.github.io/GWlasso/reference/print.gwlfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing gwlfit objects — print.gwlfit","text":"","code":"predictors <- matrix(data = rnorm(2500), 50,50) y_value <- sample(1:1000, 50) coords <- data.frame(\"Lat\" = rnorm(50), \"Long\" = rnorm(50)) distance_matrix <- compute_distance_matrix(coords)  my.gwl.fit <- gwl_fit(bw = 20,                       x.var = predictors,                        y.var = y_value,                       kernel = \"bisquare\",                       dist.mat = distance_matrix,                        alpha = 1,                        adaptive = TRUE,                        progress = TRUE,                       nfolds = 5)  my.gwl.fit #> Bandwidth : 20  #> adaptive : TRUE  #> Number of models : 50  #> RMSPE :  312.6015  #> Number of predictors : 50"},{"path":[]},{"path":"https://nibortolum.github.io/GWlasso/news/index.html","id":"gwlasso-100","dir":"Changelog","previous_headings":"","what":"GWlasso 1.0.0","title":"GWlasso 1.0.0","text":"Initial CRAN submission.","code":""}]
